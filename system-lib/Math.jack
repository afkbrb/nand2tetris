// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powerOf;

    /** Initializes the library. */
    function void init() {
        let powerOf = Array.new(16);

        let powerOf[0] = 1;
        let powerOf[1] = 2;
        let powerOf[2] = 4;
        let powerOf[3] = 8;
        let powerOf[4] = 16;
        let powerOf[5] = 32;
        let powerOf[6] = 64;
        let powerOf[7] = 128;
        let powerOf[8] = 256;
        let powerOf[9] = 512;
        let powerOf[10] = 1024;
        let powerOf[11] = 2048;
        let powerOf[12] = 4096;
        let powerOf[13] = 8192;
        let powerOf[14] = 16384;
        let powerOf[15] = 16384 + 16384; // int 常量最大为 2^16 - 1 (15 个 1) 
        
        return;
    }

    // return the n-th bit of x
    function boolean bit(int x, int n) {
        return ~((x & powerOf[n]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int nx, ny;
        var int q;

        if (y = 0) {
            return -1; // 讲道理应该报错 
        }

        if (x < 0) {
            let nx = 1;
            let x = -x;
        } else {
            let nx = -1;
        }
        if (y < 0) {
            let ny = 1;
            let y = -y;
        } else {
            let ny = -1;
        }

        let q = Math._divide(x, y);

        if ((nx + ny) = 0) { // 一正一负
            return -q;
        } else {
            return q; // 同号
        }

    }

    function int _divide(int x, int y) {
        var int q;

        if (y > x) {
            return 0;
        }
        if (y < 0) {
            return 0; // 2*y overflow
        }

        let q = Math._divide(x, y + y);
        if ((x - ((q*y) + (q*y))) < y) {
            return q + q;
        } else {
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    // 二分法
    function int sqrt(int x) {
        var int y;
        var int i;
        var int t, ts;

        let y = 0;
        let i = 7; // 16/2 - 1
        while (~(i < 0)) {
            let t = y + powerOf[i];
            let ts = t * t;
            if ((~(ts > x)) & (ts > 0)) { // 2^7 + 2^6 + ... + 1 = 2^8 - 1，平方后溢出（最大正整数 2^15 - 1）
                let y = t;
            }
            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
