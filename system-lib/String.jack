// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array buffer;
    field int len, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let maxLen = maxLength;
        let buffer = Array.new(maxLen);
        let len = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do buffer.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let buffer[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }


    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int intVal;
        var int i;
        var boolean isNeg;

        let intVal = 0;

        if ((len > 0) & (buffer[0] = 45)) { // '-'
            let isNeg = true;
            let i = 1; // skip '-'
        } else {
            let isNeg = false;
            let i = 0;
        }

        while ((i < len) & String.isDigit(buffer[i])) {
            let intVal = (intVal * 10) + String.digitValue(buffer[i]);
            let i = i + 1;
        }

        if (isNeg) {
            return -intVal;
        } else {
            return intVal;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if (val < 0) {
            let val = - val;
            do appendChar(45); // '-'
        }

        do _setInt(val);

        return;
    }

    method void _setInt(int val) {
        var int q, mod;
        var char c;

        let q = val / 10;
        let mod = val - (q * 10);
        let c = String.digitChar(mod);

        if (val > 9) {
            do _setInt(q);
        }
        do appendChar(c);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // 不是正常的 ASCII
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129; // 不是正常的 ASCII
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
    
    function boolean isDigit(char c) {
        return (c > 47) & (c < 58); // [48, 57]
    }

    function int digitValue(char c) {
        return c - 48;
    }

    function int digitChar(int digit) {
        return digit + 48;
    }
}
